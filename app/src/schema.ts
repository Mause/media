/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/delete/{type}/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Delete */
    get: operations['delete'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stream/{type}/{tmdb_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stream */
    get: operations['stream'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/select/{tmdb_id}/season/{season}/download_all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Select */
    get: operations['select'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/download': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Download Post */
    post: operations['download_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/index': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Index */
    get: operations['index'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stats */
    get: operations['stats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/movie/{tmdb_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Movie */
    get: operations['movie'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/torrents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Torrents */
    get: operations['torrents'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Search */
    get: operations['search'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/providers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Providers */
    get: operations['get_providers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/discover': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Discover */
    get: operations['discover'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/tmdb/configuration': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Tmdb Configuration */
    get: operations['tmdb_configuration'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/plex/{thing_type}/{tmdb_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Plex Imdb */
    get: operations['get_plex_imdb'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/tv/{tmdb_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Api Tv */
    get: operations['api_tv'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/tv/{tmdb_id}/season/{season}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Api Tv Season */
    get: operations['api_tv_season'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/monitor': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Monitor Get */
    get: operations['monitor_get'];
    put?: never;
    /** Monitor Post */
    post: operations['monitor_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/monitor/{monitor_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Monitor Delete */
    delete: operations['monitor_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/monitor/cron': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Monitor Cron */
    post: operations['monitor_cron'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/diagnostics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Diagnostics */
    get: operations['diagnostics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/diagnostics/{component_name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Component Diagnostics */
    get: operations['component_diagnostics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/redirect/{type_}/{tmdb_id}/{season}/{episode}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Redirect To Imdb Deep */
    get: operations['redirect_to_imdb_deep'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/redirect/{type_}/{tmdb_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Redirect To Imdb */
    get: operations['redirect_to_imdb'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * ComponentType
     * @description Enum used to store the component types.
     * @enum {string}
     */
    ComponentType: 'datastore' | 'internal' | 'http' | 'generic';
    /** Configuration */
    Configuration: {
      images: components['schemas']['ImagesConfiguration'];
      /** Change Keys */
      change_keys: string[];
    };
    /** CronResponse[MonitorGet] */
    CronResponse_MonitorGet_: {
      /** Success */
      success: boolean;
      /** Message */
      message: string;
      subject?: components['schemas']['MonitorGet'] | null;
    };
    /** DiagnosticsRoot */
    DiagnosticsRoot: {
      /** Version */
      version: string;
      /** Checks */
      checks: string[];
    };
    /** Discover */
    Discover: {
      /** Page */
      page: number;
      /** Results */
      results: components['schemas']['DiscoverMovie'][];
      /** Total Pages */
      total_pages: number;
      /** Total Results */
      total_results: number;
    };
    /** DiscoverMovie */
    DiscoverMovie: {
      /** Id */
      id: number;
      /** Title */
      title: string;
      /** Release Date */
      release_date?: string | null;
      /** Poster Path */
      poster_path?: string | null;
      /** Backdrop Path */
      backdrop_path?: string | null;
      /** Overview */
      overview?: string | null;
    };
    /** DownloadAllResponse */
    DownloadAllResponse: {
      /** Packs */
      packs: components['schemas']['ITorrent'][];
      /** Complete */
      complete: [string, components['schemas']['ITorrent'][]][];
      /** Incomplete */
      incomplete: [string, components['schemas']['ITorrent'][]][];
    };
    /** DownloadPost */
    DownloadPost: {
      /** Tmdb Id */
      tmdb_id: number;
      /** Magnet */
      magnet: string;
      /** Season */
      season?: number | null;
      /** Episode */
      episode?: number | null;
    };
    /** DownloadSchema */
    DownloadSchema: {
      /** Id */
      id: number;
      /** Tmdb Id */
      tmdb_id: number;
      /** Transmission Id */
      transmission_id: string;
      /** Imdb Id */
      imdb_id: string;
      /** Type */
      type: string;
      /** Title */
      title: string;
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      added_by: components['schemas']['UserSchema'];
    };
    /** Episode */
    Episode: {
      /** Name */
      name: string;
      /** Id */
      id: number;
      /** Episode Number */
      episode_number: number;
      /** Air Date */
      air_date?: string | null;
    };
    /** EpisodeDetailsSchema */
    EpisodeDetailsSchema: {
      /** Id */
      id: number;
      download: components['schemas']['DownloadSchema'];
      /** Show Title */
      show_title: string;
      /** Season */
      season: number;
      /** Episode */
      episode: number | null;
    };
    /** EpisodeInfo */
    EpisodeInfo: {
      /** Seasonnum */
      seasonnum: number;
      /** Epnum */
      epnum?: number | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** HealthcheckResponse */
    HealthcheckResponse: {
      /** Component Name */
      component_name: string;
      component_type: components['schemas']['ComponentType'];
      status: components['schemas']['HealthcheckStatus'];
      /**
       * Time
       * Format: date-time
       */
      time: string;
      /** Output */
      output: unknown;
    };
    /** HealthcheckResponses */
    HealthcheckResponses: components['schemas']['HealthcheckResponse'][];
    /**
     * HealthcheckStatus
     * @description Enum used to store the possible service and component health status.
     * @enum {string}
     */
    HealthcheckStatus: 'pass' | 'warn' | 'fail';
    /** ITorrent */
    ITorrent: {
      source: components['schemas']['ProviderSource'];
      /** Title */
      title: string;
      /** Seeders */
      seeders: number;
      /** Download */
      download: string;
      /** Category */
      category: string;
      episode_info?: components['schemas']['EpisodeInfo'] | null;
    };
    /** ImagesConfiguration */
    ImagesConfiguration: {
      /** Base Url */
      base_url: string;
      /** Secure Base Url */
      secure_base_url: string;
      /** Backdrop Sizes */
      backdrop_sizes: string[];
      /** Logo Sizes */
      logo_sizes: string[];
      /** Poster Sizes */
      poster_sizes: string[];
      /** Profile Sizes */
      profile_sizes: string[];
      /** Still Sizes */
      still_sizes: string[];
    };
    /** IndexResponse */
    IndexResponse: {
      /** Series */
      series: components['schemas']['SeriesDetails'][];
      /** Movies */
      movies: components['schemas']['MovieDetailsSchema'][];
    };
    /** InnerTorrent */
    InnerTorrent: {
      /** Eta */
      eta: number;
      /** Hashstring */
      hashString: string;
      /** Id */
      id: number;
      /** Percentdone */
      percentDone: number;
      /** Files */
      files: components['schemas']['InnerTorrentFile'][];
    };
    /** InnerTorrentFile */
    InnerTorrentFile: {
      /** Bytescompleted */
      bytesCompleted: number;
      /** Length */
      length: number;
      /** Name */
      name: string;
    };
    /**
     * MediaType
     * @enum {string}
     */
    MediaType: 'series' | 'movie';
    /** MonitorGet */
    MonitorGet: {
      /** Tmdb Id */
      tmdb_id: number;
      type: components['schemas']['MonitorMediaType'];
      /** Id */
      id: number;
      /** Title */
      title: string;
      added_by: components['schemas']['UserSchema'];
      /**
       * Status
       * @default false
       */
      status: boolean;
    };
    /**
     * MonitorMediaType
     * @enum {string}
     */
    MonitorMediaType: 'MOVIE' | 'TV';
    /** MonitorPost */
    MonitorPost: {
      /** Tmdb Id */
      tmdb_id: number;
      type: components['schemas']['MonitorMediaType'];
    };
    /** MovieDetailsSchema */
    MovieDetailsSchema: {
      /** Id */
      id: number;
      download: components['schemas']['DownloadSchema'];
    };
    /** MovieResponse */
    MovieResponse: {
      /** Title */
      title: string;
      /** Imdb Id */
      imdb_id: string | null;
    };
    /** PlexMedia */
    PlexMedia: {
      /** Ratingkey */
      ratingKey: number;
      /** Title */
      title: string;
      /**
       * Year
       * @default null
       */
      year: number | null;
      /**
       * Type
       * @enum {string}
       */
      type: 'movie' | 'show';
      /**
       * Guid
       * @default null
       */
      guid: string | null;
      /**
       * Summary
       * @default null
       */
      summary: string | null;
      /**
       * Thumb
       * @default null
       */
      thumb: string | null;
      /**
       * Art
       * @default null
       */
      art: string | null;
    };
    /** PlexResponse[PlexMedia] */
    PlexResponse_PlexMedia_: {
      /** Server Id */
      server_id: string;
      item: components['schemas']['PlexMedia'];
      /**
       * Link
       * Format: uri
       */
      readonly link: string;
    };
    /**
     * ProviderSource
     * @enum {string}
     */
    ProviderSource:
      | 'kickass'
      | 'horriblesubs'
      | 'rarbg'
      | 'torrentscsv'
      | 'nyaasi'
      | 'piratebay'
      | 'luna';
    /** SearchResponse */
    SearchResponse: {
      /** Title */
      title: string;
      type: components['schemas']['MediaType'];
      /** Year */
      year: number | null;
      /** Tmdb Id */
      tmdb_id: number;
    };
    /** SeasonMeta */
    SeasonMeta: {
      /** Episode Count */
      episode_count: number;
      /** Season Number */
      season_number: number;
    };
    /** SeriesDetails */
    SeriesDetails: {
      /** Title */
      title: string;
      /** Imdb Id */
      imdb_id: string;
      /** Tmdb Id */
      tmdb_id: number;
      /** Seasons */
      seasons: {
        [key: string]: components['schemas']['EpisodeDetailsSchema'][];
      };
    };
    /** Stats */
    Stats: {
      /**
       * Episode
       * @default 0
       */
      episode: number;
      /**
       * Movie
       * @default 0
       */
      movie: number;
    };
    /** StatsResponse */
    StatsResponse: {
      /** User */
      user: string;
      values: components['schemas']['Stats'];
    };
    /** TvResponse */
    TvResponse: {
      /** Number Of Seasons */
      number_of_seasons: number;
      /** Seasons */
      seasons: components['schemas']['SeasonMeta'][];
      /** Imdb Id */
      imdb_id: string | null;
      /** Title */
      title: string;
    };
    /** TvSeasonResponse */
    TvSeasonResponse: {
      /** Episodes */
      episodes: components['schemas']['Episode'][];
    };
    /** UserSchema */
    UserSchema: {
      /** Username */
      username: string;
      /** First Name */
      first_name: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** BaseRequest */
    BaseRequest: {
      /**
       * Jsonrpc
       * @default 2.0
       * @constant
       */
      jsonrpc: '2.0';
      /** Id */
      id: number;
      /** Method */
      method: string;
      /**
       * Authorization
       * Format: password
       */
      authorization: string;
    };
    /** PingArgs */
    PingArgs: {
      /**
       * Jsonrpc
       * @default 2.0
       * @constant
       */
      jsonrpc: '2.0';
      /** Id */
      id: number;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      method: 'ping';
      /**
       * Authorization
       * Format: password
       */
      authorization: string;
    };
    /** PlexArgs */
    PlexArgs: {
      /**
       * Jsonrpc
       * @default 2.0
       * @constant
       */
      jsonrpc: '2.0';
      /** Id */
      id: number;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      method: 'plex';
      /**
       * Authorization
       * Format: password
       */
      authorization: string;
      /** Tmdb Id */
      tmdb_id: number;
      /**
       * Media Type
       * @enum {string}
       */
      media_type: 'movie' | 'tv';
    };
    /** PlexRootResponse */
    PlexRootResponse: {
      /**
       * Jsonrpc
       * @default 2.0
       * @constant
       */
      jsonrpc: '2.0';
      /** Data */
      data: {
        [key: string]: components['schemas']['PlexResponse_PlexMedia_'];
      };
      /** Id */
      id: number;
    };
    /** Reqs */
    Reqs:
      | components['schemas']['StreamArgs']
      | components['schemas']['PingArgs']
      | components['schemas']['PlexArgs'];
    /** SocketMessage */
    SocketMessage: {
      /**
       * Jsonrpc
       * @default 2.0
       * @constant
       */
      jsonrpc: '2.0';
      /** Data */
      data: unknown;
      /** Id */
      id: number;
    };
    /** StreamArgs */
    StreamArgs: {
      /**
       * Jsonrpc
       * @default 2.0
       * @constant
       */
      jsonrpc: '2.0';
      /** Id */
      id: number;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      method: 'stream';
      /**
       * Authorization
       * Format: password
       */
      authorization: string;
      /**
       * Type
       * @enum {string}
       */
      type: 'series' | 'movie';
      /** Tmdb Id */
      tmdb_id: number;
      /**
       * Season
       * @default null
       */
      season: number | null;
      /**
       * Episode
       * @default null
       */
      episode: number | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        type: components['schemas']['MediaType'];
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: unknown;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  stream: {
    parameters: {
      query: {
        source: components['schemas']['ProviderSource'];
        season?: number | null;
        episode?: number | null;
      };
      header?: never;
      path: {
        type: 'series' | 'movie';
        tmdb_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/event-stream': unknown;
          'application/json': components['schemas']['ITorrent'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  select: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tmdb_id: number;
        season: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DownloadAllResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  download_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadPost'][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': (
            | components['schemas']['MovieDetailsSchema']
            | components['schemas']['EpisodeDetailsSchema']
          )[];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  index: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IndexResponse'];
        };
      };
    };
  };
  stats: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StatsResponse'][];
        };
      };
    };
  };
  movie: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tmdb_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MovieResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  torrents: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: components['schemas']['InnerTorrent'];
          };
        };
      };
    };
  };
  search: {
    parameters: {
      query: {
        query: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SearchResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_providers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderSource'][];
        };
      };
    };
  };
  discover: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Discover'];
        };
      };
    };
  };
  tmdb_configuration: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Configuration'];
        };
      };
    };
  };
  get_plex_imdb: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thing_type: 'movie' | 'tv';
        tmdb_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]:
              | components['schemas']['PlexResponse_PlexMedia_']
              | null;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  api_tv: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tmdb_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TvResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  api_tv_season: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tmdb_id: number;
        season: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TvSeasonResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  monitor_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MonitorGet'][];
        };
      };
    };
  };
  monitor_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MonitorPost'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MonitorGet'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  monitor_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        monitor_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: unknown;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  monitor_cron: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CronResponse_MonitorGet_'][];
        };
      };
    };
  };
  diagnostics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DiagnosticsRoot'];
        };
      };
    };
  };
  component_diagnostics: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        component_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HealthcheckResponses'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  redirect_to_imdb_deep: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        type_: components['schemas']['MediaType'];
        tmdb_id: number;
        season: number | null;
        episode: number | null;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  redirect_to_imdb: {
    parameters: {
      query?: {
        season?: number | null;
        episode?: number | null;
      };
      header?: never;
      path: {
        type_: components['schemas']['MediaType'];
        tmdb_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
